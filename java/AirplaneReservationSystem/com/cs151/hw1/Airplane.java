package com.cs151.hw1;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : CS151_HW13
//  @ File Name : ReservationSystem.java
//  @ Date : 9/8/2011
//  @ Author : 
//
//

/** */
public class Airplane implements Serializable {
	public static FirstClass firstClass;
	public static BusinessClass businessClass;
	public static EconomyClass economyClass;
	public static Seat[][] firstSeating;
	public static Seat[][] businessSeating;
	public static Seat[][] economySeating;
	public int temp_row_count = 0;
	public Seat tempIndividualSeat;
	
	public static SeatingArea seating;
	/** */
	public String flightNumber;
	
	/** 
	 * Returns whether or not the request was fulfilled.
	 * 
	 * Allows user to attempt to reserve an individual seat on the plane.
	 * @param	name	passenger's name
	 * @param	classPref	class preference request
	 * @param	seatPref	seat preference request aisle/center/window
	 * */
	public boolean IndividualRequest(String name, String classPref, char seatPref) {
		Seat temp;
		if (classPref.equals("First"))
		{
			if (firstClass.firstFull) 
			{
				System.out.println("Reservation Failed");
				return false;
			}
			temp = firstClass.findFirstSeat(seatPref);
			if (temp == null) 
			{
				System.out.println("Reservation Failed");
				return false;
			}
			temp.setReserved(name);
			System.out.println(name + " has been reserved for seat: " + (temp.rowNum+1) + temp.seatPos);
			return true;
		}
		else if (classPref.equals("Business"))
		{
			if (businessClass.businessFull)
			{
				System.out.println("Reservation Failed");
				return false;
			}
			temp = businessClass.findBusinessSeat(seatPref);
			if (temp == null) 			
			{
				System.out.println("Reservation Failed");
				return false;
			}

			temp.setReserved(name);
			System.out.println(name + " has been reserved for seat: " + (temp.rowNum+firstClass.numOfRows+1) + temp.seatPos);
			return true;
		}
		else if (classPref.equals("Economy"))	
		{
			if (economyClass.economyFull)
			{
				System.out.println("Reservation Failed");
				return false;
			}
			temp = economyClass.findEconomySeat(seatPref);
			if (temp == null)
			{
				System.out.println("Reservation Failed");
				return false;
			}

			temp.setReserved(name);
			System.out.println(name + " has been reserved for seat: " + (temp.rowNum+firstClass.numOfRows+businessClass.numOfRows+1) + temp.seatPos);
			return true;
		}
	
		System.out.println("Reservation Failed!\n" + "Error: Invalid Class Selection");
		return false;
	}
	
	/**
	 * Returns whether or not the group request was fulfilled.
	 * 
	 *  Allows user to reserve seats for a group on the plane.
	 *  @param	num		number of people to try to add
	 *  @param	classPref	class preference request
	 *  @param	names	queue of individuals to add the plane
	 * */
	public boolean GroupRequest(int num, String classPref, Queue<String> names) {
	
		if (classPref.equals("First"))
		{
			while (num > 0)
			{
				//System.out.println(num);
				num = firstClass.findFirstRowForGroup(num, names);
				if (num == -1)
				{
					System.out.println("Reservation Failed");
					return false;
				}
			}
			return true;
		}
		else if (classPref.equals("Business"))
		{
			while (num > 0)
			{
				if (num == -1)
				{
					System.out.println("Reservation Failed");
					return false;
				}
				num = businessClass.findBusinessRowForGroup(num, names);
			}
			return true;
		}
		else if (classPref.equals("Economy"))
		{
			while (num > 0)
			{
				if (num == -1)
				{
					System.out.println("Reservation Failed");
					return false;
				}
				num = economyClass.findEconomyRowForGroup(num, names);
			}
			return true;
		}
		
		return false;
	}
	
	/** 
	 * Returns whether or not the cancel request was fulfilled
	 * 
	 * Allows user to cancel a reservation for a passenger on the plane.
	 * @param	name	name of passenger
	 * */
	public boolean CancelRequest(String name) {
		boolean check;
		check = firstClass.removeSingle(name);
		if (!check) check = businessClass.removeSingle(name);
		if (!check) check = economyClass.removeSingle(name);
		
		return check;
	}
	
	/** 
	 * Returns whether or not the group cancel request was fulfilled
	 * 
	 * Allows user to cancel a list or group of passengers on the plane.
	 * @param	names	list of passengers to cancel
	 * */
	public boolean CancelRequest(Queue<String> names) {
		if (firstClass.created) firstClass.removeGroup(names);
		if (!names.isEmpty() && businessClass.created) businessClass.removeGroup(names);
		if (!names.isEmpty() && economyClass.created) economyClass.removeGroup(names);
		
		if (!names.isEmpty()) return false;
		return true;
	}
	
	/** 
	 * Prints entire seating chart of plane
	 * */
	public void PrintSeatingChart() {
		System.out.println("");
		System.out.println("Seating Chart");
		System.out.println("-------------");
		PrintFirstSeatingChart();
		PrintBusinessSeatingChart();
		PrintEconomySeatingChart();
	}
	
	/** 
	 * Prints first class seating chart of plane
	 * */
	private void PrintFirstSeatingChart()
	{
		temp_row_count = 0;
		if (firstClass.created)	System.out.println("First");
		else return;
		
		for (int i = 0; i < firstClass.numOfRows; i++)
		{
			System.out.print(temp_row_count+1 + " ");
			for (int j = 0; j < firstClass.rowLength; j++)
			{
				System.out.print(firstSeating[i][j].seatType);
			}
			System.out.println("");
			temp_row_count++;
		}
	}
	
	/** 
	 * Prints business class seating chart of plane
	 * */
	private void PrintBusinessSeatingChart()
	{
		if (businessClass.created) System.out.println("Business");
		else return;
		for (int i = 0; i < businessClass.numOfRows; i++)
		{
			System.out.print(temp_row_count+1 + " ");
			for (int j = 0; j < businessClass.rowLength; j++)
			{
				System.out.print(businessSeating[i][j].seatType);
			}
			System.out.println("");
			temp_row_count++;
		}
	}
	
	/** 
	 * Prints economy class seating chart of plane
	 * */
	private void PrintEconomySeatingChart()
	{
		if (economyClass.created) System.out.println("Economy");
		else return;
		for (int i = 0; i < economyClass.numOfRows; i++)
		{
			System.out.print(temp_row_count+1 + " ");
			for (int j = 0; j < economyClass.rowLength; j++)
			{
				System.out.print(economySeating[i][j].seatType);
			}
			System.out.println("");
			temp_row_count++;
		}
	}
	
	/** 
	 * Prints entire passenger manifest of plane
	 * */
	public void PrintManifestList() {
		System.out.println("");
		System.out.println("Passenger Manifest");
		System.out.println("------------------");
		PrintFirstManifest();
		PrintBusinessManifest();
		PrintEconomyManifest();
	}
	
	/** 
	 * Prints passenger manifest of first class
	 * */
	private void PrintFirstManifest()
	{
		temp_row_count = 0;
		if (!firstClass.created) return;
		for (int i = 0; i < firstClass.numOfRows; i++)
		{
			for (int j = 0; j < firstClass.rowLength; j++)
			{
				if (firstSeating[i][j].reserved)
				{
					System.out.print(temp_row_count+1);
					System.out.print((char)(j+65) + " ");
					System.out.print(firstSeating[i][j].passenger.name + " ");
					System.out.println("");
				}
			}
			temp_row_count++;
		}
	}
	
	/** 
	 * Prints passenger manifest of business class
	 * */
	private void PrintBusinessManifest()

	{
		if (!businessClass.created) return;
		for (int i = 0; i < businessClass.numOfRows; i++)
		{
			for (int j = 0; j < businessClass.rowLength; j++)
			{
				if (businessSeating[i][j].reserved)
				{
					System.out.print(temp_row_count+1);
					System.out.print((char)(j+65) + " ");
					System.out.print(businessSeating[i][j].passenger.name + " ");
					System.out.println("");
				}
			}
			temp_row_count++;
		}
	}

	/** 
	 * Prints passenger manifest of economy class
	 * */
	private void PrintEconomyManifest()
	{
		if (!economyClass.created) return;
		for (int i = 0; i < economyClass.numOfRows; i++)
		{
			for (int j = 0; j < economyClass.rowLength; j++)
			{
				if (economySeating[i][j].reserved)
				{
					System.out.print(temp_row_count+1);
					System.out.print((char)(j+65) + " ");
					System.out.print(economySeating[i][j].passenger.name + " ");
					System.out.println("");
				}
			}
			temp_row_count++;
		}
	}
	
	/**
	 * Airplane constructor, instantiates plane data setup and start menu.
	 * 
	 * @throws IOException  */
	public Airplane() throws IOException {
		seating = new SeatingArea();
		
		if (ReservationSystem.TESTING)
		{
			seating.addPlaneData();
			//seating.addPlaneData();
			//seating.addPlaneData();
		}
		//seating.firstClass.firstSeats[3][3].setReserved();
		
		//seating.addPlaneData();
		if (!ReservationSystem.TESTING)
			enterDummyPlaneData();
		
		
		this.firstClass = seating.firstClass;
		this.businessClass = seating.businessClass;
		this.economyClass = seating.economyClass;
		this.firstSeating = firstClass.firstSeats;
		this.businessSeating = businessClass.businessSeats;
		this.economySeating = economyClass.economySeats;
		
		//if (ReservationSystem.TESTING){
		//	startMenu();
		//}
		
		
		if (!ReservationSystem.DEMO) startMenu();
		
		if (ReservationSystem.TESTING)
		{
			this.PrintSeatingChart();
			this.PrintManifestList();
		}
	}
	
	/** 
	 * Displays the menu options for the user including add individual, add group, 
	 * cancel, print seating chart, print manifest list, and quit the program.
	 * */
	public void startMenu() throws IOException
	{
		System.out.print("Add [P]assenger, Add [G]roup, [C]ancel Reservation, Print [S]eating chart," +
				" Print [M]anifest, [Q]uit:");
		InputStreamReader input = new InputStreamReader(System.in);	
		BufferedReader reader = new BufferedReader(input);
		
		String option = reader.readLine();
		
		if (option.equals("P") || option.equals("p"))
		{ // add passenger 	public boolean IndividualRequest(String name, String classPref, char seatPref) {
			String name, classPref, temp;
			char seatPref = 'Z';
			boolean success;
			System.out.print("Name: ");
			name = reader.readLine();
			
			System.out.print("Service Class: ");
			classPref = reader.readLine();
			
			System.out.print("Seat Preference: ");
			temp = reader.readLine();
			if (temp.length() != 0) 
				seatPref = temp.charAt(0);
			
			success = IndividualRequest(name, classPref, seatPref);
			startMenu();			
		}
		else if (option.equals("G") || option.equals("g"))
		{ // add group	public boolean GroupRequest(int num, String classPref, Queue<String> names) 
			Queue<String> names;
			String classPref;
			String allPassengers;
			String[] passengerArray;
			int num;
			
			System.out.print("Names: ");
			allPassengers = reader.readLine();
			System.out.println("");
			
			System.out.print("Service class: ");
			classPref = reader.readLine();
			System.out.println("");
		
			passengerArray = allPassengers.split( ",\\s*");
			names = new LinkedList<String>();
			num = passengerArray.length;
			
			for (int i = 0; i < passengerArray.length; i++)
			{
				names.add(passengerArray[i]);
			}
			
			GroupRequest(num, classPref, names);
			startMenu();
			
		}
		else if (option.equals("C") || option.equals("c"))
		{ // cancel group or passenger
			System.out.print("Names: ");
			String allPassengers = reader.readLine();
			Queue<String> namesToRemove = new LinkedList<String>();
			String[] cancelArray;
			cancelArray = allPassengers.split( ",\\s*");
			int num = cancelArray.length;
			
			for (int i = 0; i < cancelArray.length; i++)
			{
				namesToRemove.add(cancelArray[i]);
			}
			
			CancelRequest(namesToRemove);
			startMenu();
			
		}
		else if (option.equals("S") || option.equals("s"))
		{ // print seating chart
			this.PrintSeatingChart();
			startMenu();
		}
		else if (option.equals("M") || option.equals("m"))
		{ // print manifest
			this.PrintManifestList();
			startMenu();
		}
		else if (option.equals("Q") || option.equals("q"))
		{ // quit
			return;
		}
		else
		{ // invalid
			System.out.println("Invalid Selection.");
			startMenu();
			return;
		}
	}
	
	/** 
	 * Enters dummy passenger data for testing and displaying purposes.
	 * @throws IOException 
	 * */
	public void enterDummyData(String s) throws IOException
	{
		//seating.EnterDummyData(s);
		File inputFile = new File(s);
		if (inputFile.exists())
		{
			FileInputStream input = new FileInputStream(inputFile);	
			DataInputStream in = new DataInputStream(input);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			String oneLine = "";
			String seatPattern = "";
			int tempNumOfRows = 0;
			String passengerName = "", classPref = "";
			char seatPref = 'a';
			String groupNames = "";
			String[] passengerArray;
			Queue<String> names = new LinkedList();
			while ((oneLine = br.readLine()) != null)
			{
				if (oneLine.equals("First"))
				{ // setup first class
					oneLine = br.readLine();
					seatPattern = oneLine;
					oneLine = br.readLine();
					tempNumOfRows = Integer.parseInt(oneLine);
					//System.out.println(seatPattern + " " + tempNumOfRows);
					
					
				}
				else if (oneLine.equals("Business"))
				{ // setup business class
					oneLine = br.readLine();
					seatPattern = oneLine;
					oneLine = br.readLine();
					tempNumOfRows = Integer.parseInt(oneLine);
							
				}
				else if (oneLine.equals("Economy"))
				{ // setup economy class
					oneLine = br.readLine();
					seatPattern = oneLine;
					oneLine = br.readLine();
					tempNumOfRows = Integer.parseInt(oneLine);
							
				}
				else if (oneLine.equals("P"))// passenger case
				{
					oneLine = br.readLine();
					passengerName = oneLine;
					oneLine = br.readLine();
					classPref = oneLine;
					oneLine = br.readLine();
					seatPref = oneLine.charAt(0);
					IndividualRequest(passengerName, classPref, seatPref);
				}
				else if (oneLine.equals("G"))
				{
					oneLine = br.readLine();
					groupNames = oneLine;
					oneLine = br.readLine();
					classPref = oneLine;
					passengerArray = groupNames.split( ",\\s*");
					for (int i = 0; i < passengerArray.length; i++)
					{
						names.add(passengerArray[i]);
					}
					GroupRequest(names.size(), classPref, names);
					
				}
				else if (oneLine.equals("C"))
				{
					oneLine = br.readLine();
					groupNames = oneLine;
					
					passengerArray = groupNames.split( ",\\s*");
					for (int i = 0; i < passengerArray.length; i++)
					{
						names.add(passengerArray[i]);
					}
					CancelRequest(names);	
				}
				else if (oneLine.equals("S"))
				{
					PrintSeatingChart();
				}
				else if (oneLine.equals("M"))
				{
					PrintManifestList();
				}
				else if (oneLine.equals("Q"))
				{
					return;
				}
			}
			
		}
	}
	
	/** 
	 * Enters plane data (compartment sizes, row patterns, etc) for testing and displaying purposes.
	 * */
	public void enterDummyPlaneData()
	{
		seating.enterDummyPlaneData();
	}
}
