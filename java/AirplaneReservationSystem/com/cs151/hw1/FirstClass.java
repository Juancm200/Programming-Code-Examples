package com.cs151.hw1;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : CS151_HW1
//  @ File Name : FirstClass.java
//  @ Date : 9/8/2011
//  @ Author : 
//
//




/** */
public class FirstClass implements Serializable{
	static Seat[][] firstSeats;
	public final String seatPattern;
	public final int rowLength;
	public final int numOfRows;
	public boolean created = false;
	public boolean firstFull = false;
	public int firstSeatsLeft = 0;
	
	/** 
	 * FirstClass constructor.
	 * 
	 * @param	seatPattern	String type with the row pattern composed of (W)indow, (A)isle, and (C)enter
	 * @param	numOfRows	number of rows in the particular compartment
	 * */
	public FirstClass(String seatPattern, int numOfRows) {
		this.firstFull = false;
		this.created = true;
		this.seatPattern = seatPattern;
		this.rowLength = seatPattern.length();
		this.numOfRows = numOfRows;
		this.firstSeats = new Seat[this.numOfRows][this.rowLength];
		for (int i = 0; i < this.numOfRows; i++)
		{
			for (int j = 0; j < this.rowLength; j++)
			{
				firstSeatsLeft++;
				firstSeats[i][j] = new Seat(i, (char)(j+65), seatPattern.charAt(j));
			}
		}
	}
	
	/**
	 * FirstClass constructor without any initial parameters
	 */
	public FirstClass()
	{
		this.firstSeatsLeft = 0;
		this.seatPattern = "";
		this.rowLength = 0;
		this.numOfRows = 0;
		this.firstFull = true;
	}

	/** 
	 * Returns Seat instance of the first found seat for the request.
	 * 
	 * This searches for the first seat available in the compartment based upon
	 * the seat preference.
	 * 
	 * @param	seatPref	type of seat preference
	 * */
	public Seat findFirstSeat(char seatPref)
	{
		Seat temp;
		
		for (int i = 0; i < numOfRows; i++)
		{
			for (int j = 0; j < rowLength; j++)
			{
				if (!firstSeats[i][j].reserved && firstSeats[i][j].seatType == seatPref)
				{
					temp = firstSeats[i][j];
					return temp;
				}
			}
		}
		for (int i = 0; i < numOfRows; i++)
		{
			for (int j = 0; j < rowLength; j++)
			{
				if (!firstSeats[i][j].reserved)
				{
					temp = firstSeats[i][j];
					return temp;
				}
			}
		}
		System.out.println("First Class is Full");
		firstSeatsLeft--;
		if (firstSeatsLeft <= 0)
			firstFull = true;
		return null;
	
	} // end findFirstSeat
	
	/** 
	 * Returns number of passengers left from the group who were not seated.
	 * 
	 * This searches for the first open row containing the most seats available for group reservation.
	 * 
	 * @param	num		number of passengers requesting a seat
	 * @param 	names	names of passengers trying to request a seat
	 * */
	public int findFirstRowForGroup(int num, Queue<String> names)
	{
		if (num > firstSeatsLeft) return -1;
		
		int count;
		int highestCount = -1;
		int rowWithMostSeats = -1;
		int startPos = 0;
		for (int i = 0; i < numOfRows; i++)
		{
			count = 0;
			startPos = 0;
		
			for (int j = 0; j < rowLength; j++)
			{
				if (!firstSeats[i][j].reserved)
				{
					count++;
					if (count > highestCount)
					{
						highestCount = count+1;
						rowWithMostSeats = i;
					}
					if (count >= num)
					{
						break;
					}
					
				}
				else
				{
					count = 0;
					startPos = j;
				}
				if (count >= num)
				{
					break;
				}
			}
			if (count >= num)
			{
				break;
			}
			
		}
		//System.out.println(startPos);
		Seat temp;
		for (int c = startPos; c < highestCount+startPos; c++)
		{
			if (c+1 > firstSeats[rowWithMostSeats].length) break;
			temp = firstSeats[rowWithMostSeats][c];
			if (!names.isEmpty())
			{
				System.out.println(names.peek() + " has been reserved for seat: " + (temp.rowNum+1) + temp.seatPos);
				temp.setReserved(names.remove());
			}
		}
		
		firstSeatsLeft -= highestCount;
		if (firstSeatsLeft <= 0)
			firstFull = true;
		
		return num-highestCount;
	} // end findFirstRowForGroup()

	/** 
	 * Cancels reservation for a single person on the plane.
	 * */
	public boolean removeSingle(String name)
	{
		for (int i = 0; i < numOfRows; i++)
		{
			for (int j = 0; j < rowLength; j++)
			{
				if (firstSeats[i][j].passenger.name.equals(name))
				{
					firstSeats[i][j].clearSeat();
					firstSeatsLeft++;
					if (firstFull && firstSeatsLeft > 0)
					{
						firstFull = false;
					}
					return true;
				}
			}
		}
		return false;
	} // end removeSingle()

	/** 
	 * Cancels a number of passengers based upon names entered
	 * */
	public void removeGroup(Queue<String> names)
	{
		for (int i = 0; i < names.size(); i++)
		{
			if (removeSingle(names.peek())) names.remove();
		}
	}
}
